import java.util.Date;

import org.apache.axis.AxisFault;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.sakaiproject.authz.api.SecurityService;
import org.sakaiproject.component.cover.ComponentManager;
import org.sakaiproject.sitestats.api.StatsUpdateManager;
import org.sakaiproject.tool.api.Session;
import org.sakaiproject.tool.api.SessionManager;

/**
 *   SiteStats.jws 
 *   
 *   Webservice for the SiteStats API.
 * 
 */
public class SiteStats {
    private static final Log LOG = LogFactory.getLog("org.sakaiproject.axis.SiteStats");

    private SessionManager 		sessionManager;
    private SecurityService 	securityService;
    private StatsUpdateManager 	statsUpdateManager;
    
    public SiteStats() {
    	sessionManager = (SessionManager) ComponentManager.get(SessionManager.class.getName());
    	securityService = (SecurityService) ComponentManager.get(SecurityService.class.getName());
    	statsUpdateManager = (StatsUpdateManager) ComponentManager.get(StatsUpdateManager.class.getName());
    }
    
    /** Collect site events from SAKAI_EVENT table for a specific site, between specified dates. */
    public long collectPastSiteEvents(String sessionid, String siteId, Date initialDate, Date finalDate) throws AxisFault {
    	Session session = establishSession(sessionid);
    	if(!securityService.isSuperUser()) {
    		LOG.warn("NonSuperUser trying to collect past site events: " + session.getUserId());
            throw new AxisFault("NonSuperUser trying to collect past site events: " + session.getUserId());
    	}
    	
    	return statsUpdateManager.collectPastSiteEvents(siteId, initialDate, finalDate);
    }

	
    /**
     * Get the Session related to the given sessionid
     * @param sessionid		the id of the session to retrieve
     * @return				the session, if it is active
     * @throws AxisFault	if session is inactive
     */
    private Session establishSession(String sessionid) throws AxisFault 
    {
    	Session s = sessionManager.getSession(sessionid);
    	if (s == null) {
    		throw new AxisFault("Session \""+sessionid+"\" is not active");
    	}
    	s.setActive();
    	sessionManager.setCurrentSession(s);
    	return s;
    }
    
}

