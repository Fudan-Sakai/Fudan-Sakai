
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.Iterator;
import java.net.URLEncoder;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.sakaiproject.util.Xml;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import org.sakaiproject.tool.api.Session;
import org.sakaiproject.tool.cover.SessionManager;

import org.sakaiproject.site.api.Site;
import org.sakaiproject.site.api.SitePage;
import org.sakaiproject.site.api.ToolConfiguration;
import org.sakaiproject.tool.api.ToolException;
import org.sakaiproject.site.cover.SiteService;
import org.sakaiproject.user.cover.UserDirectoryService;
import org.sakaiproject.user.api.User;

import org.sakaiproject.tool.api.ActiveTool;
import org.sakaiproject.tool.cover.ActiveToolManager;

import org.sakaiproject.util.Web;

import org.sakaiproject.axis.util.XMLMap;

import org.sakaiproject.tool.api.ActiveTool;
import org.sakaiproject.tool.api.Placement;
import org.sakaiproject.tool.api.Tool;
import org.sakaiproject.component.cover.ServerConfigurationService;

import org.apache.axis.MessageContext;
import org.apache.axis.AxisFault;
import org.apache.axis.Constants;

import org.sakaiproject.javax.PagingPosition;

// Necessary until code moves into UsageSessionServiceAdaptor.java
import org.sakaiproject.event.api.UsageSession;
import org.sakaiproject.event.cover.UsageSessionService;
import org.sakaiproject.authz.cover.AuthzGroupService;
import org.sakaiproject.event.cover.EventTrackingService;

/**
 * class to support Sakai Login headers sent in request as a string array
 */
public class EndPointLite {


    private static final Log LOG = LogFactory.getLog(EndPointLite.class);

    public String doLaunch(String xmlStr)
	throws AxisFault 
    {
 	String configSecret = ServerConfigurationService.getString("imsti.globalsecret");
	if ( configSecret == null || configSecret.trim().length() < 1 ) 
		throw new AxisFault("Sakai instance is not configured to support TI EndPoint");

	System.out.println("EndPoint.jws Incoming Message\n"+xmlStr);
        Map<String, String> tm = XMLMap.getMap(xmlStr);

	String userEid = tm.get("/LaunchRequest/LaunchData/LaunchProfile/UserProfile/IMSSourcedid/SourceID");
	String placementId = tm.get("/LaunchRequest/DeploymentProfile/ToolSettings/SettingsDefinition/instance/placementId");
	String secret = tm.get("/LaunchRequest/DeploymentProfile/SecurityProfile/SharedSecret");
	String portalType = tm.get("/LaunchRequest/LaunchData/Ancillary/PortalType");
	System.out.println("Eid = "+userEid+" placement="+placementId+" secret="+secret);

	if ( userEid == null )  throw new AxisFault("Error in XML /LaunchRequest/LaunchData/LaunchProfile/UserProfile/IMSSourcedid/SourceID is null");
	if ( placementId == null ) throw new AxisFault("Error in XML /LaunchRequest/DeploymentProfile/ToolSettings/SettingsDefinition/instance/placementId is null");
	if ( ! configSecret.equals(secret) ) throw new AxisFault("Error in Launch XML /LaunchRequest/DeploymentProfile/SecurityProfile/SharedSecret is null");

        User user = null ;

        try {
                user = UserDirectoryService.getUserByEid(userEid);
        } catch (Exception e) {
                user = null;
        }
	if ( user == null ) {
		throw new AxisFault("User not found...");
	}

        MessageContext messageContext = MessageContext.getCurrentContext();
        String ipAddress = messageContext.getStrProp(Constants.MC_REMOTE_ADDR);
	System.out.println("ipAddress="+ipAddress);
	String sessionId = null;
	String siteId = null;
	boolean skipSession = "sakai".equals(portalType) &&  "127.0.0.1".equals(ipAddress);
	System.out.println("skipSession = "+skipSession);

        if ( user != null ) {
                System.out.println("Have User");
                Session s = SessionManager.startSession();
                SessionManager.setCurrentSession(s);
                if (s == null)
                {
                        throw new AxisFault("Unable to establish session");
                }
                else 
                {
                        // We do not care too much on the off-chance that this fails - folks simply won't show up in presense
                        // and events won't be trackable back to people / IP Addresses - but if it fails - there is nothing
                        // we can do anyways.

                        UsageSessionService_loginDirect(user.getId(), userEid, ipAddress, "EndPointLite.jws");

                        try {
                                siteId = SiteService.getUserSiteId(s.getUserId());
                                System.out.println("Site exists..."+siteId);
                        } catch(Exception e) {
                                System.out.println("Site does not exist...");
                                throw new AxisFault("Failed login");
                        }
                        sessionId = s.getId();
                        System.out.println("Session established id="+userEid+" ip="+ipAddress+" session="+sessionId);
                }
        }
	
	String returnUrl = null;
	Map<String,String> retMap = new TreeMap();
	if ( "portal".equals(placementId) ) {
		// String portalUrl = ServerConfigurationService.getPortalUrl();
		String serverUrl = ServerConfigurationService.getServerUrl();
		returnUrl = serverUrl + "/portal/pda";
	} else {
		System.out.println("siteId="+siteId+" placement="+placementId);
		placementId = getPlacement(siteId, placementId);
		System.out.println("after siteId="+siteId+" placement="+placementId);
          	String toolUrl = ServerConfigurationService.getToolUrl() + "/" + Web.escapeUrl(placementId);
		System.out.println("toolUrl = "+toolUrl);
                // find the tool from some site
                ToolConfiguration siteTool = SiteService.findTool(placementId);
		System.out.println("siteTool="+siteTool);
		if ( siteTool != null ) {
                	ActiveTool tool = ActiveToolManager.getActiveTool(siteTool.getToolId());
			System.out.println("tool="+tool);
			if ( tool == null ) toolUrl = null;
		} else {
			toolUrl = null;
		}
		returnUrl = toolUrl;
	}

	if ( returnUrl != null ) {
		if ( sessionId != null && ! skipSession ) {
			if ( returnUrl.indexOf("?") > 0 ) {
				returnUrl = returnUrl + "&";
			} else {
				returnUrl = returnUrl + "?";
			}
			returnUrl = returnUrl + "sakai.session=" + sessionId;
		}
		retMap.put("/LaunchResponse/imsx_CodeMajor","success");  // failure
		retMap.put("/LaunchResponse/imsx_CodeMinor","status");   // error
		retMap.put("/LaunchResponse/Ancillary/frame-height","1200");
		retMap.put("/LaunchResponse/LaunchDirective","redirect");
		retMap.put("/LaunchResponse/LaunchAction",returnUrl);
		retMap.put("/LaunchResponse/Ancillary/sakai:frameid",Web.escapeJavascript("Main"+placementId) );
		retMap.put("/LaunchResponse/Ancillary/sakai:sessionid",sessionId);
	} else {
		retMap.put("/LaunchResponse/imsx_CodeMajor","failure");  // failure
		retMap.put("/LaunchResponse/imsx_CodeMinor","error");   // error
		retMap.put("/LaunchResponse/LaunchDirective","display");
		retMap.put("/LaunchResponse/LaunchAction","Unable to resolve placement "+placementId);
	}
	String ret = XMLMap.getXML(retMap);
	String pretty = XMLMap.getXML(retMap, true);
	System.out.println("EndPoint.jws returning\n"+pretty);
	return ret;
    }

    // This code is adapted from the file:
    // ./event-impl/impl/src/java/org/sakaiproject/event/impl/UsageSessionServiceAdaptor.java
    // Method
    // public boolean login(Authentication authn, HttpServletRequest req)
    // We want to do exactly what this routine *does* but we do not have an HttpServletRequest
    // to hand it

        public boolean UsageSessionService_loginDirect(String userId, String userEid, String ipAddress, String userAgent)
        {
                // establish the user's session - this has been known to fail
                UsageSession session = UsageSessionService.startSession(userId,ipAddress,userAgent);
                if (session == null)
                {
                        return false;
                }

                // set the user information into the current session
                Session sakaiSession = SessionManager.getCurrentSession();
                sakaiSession.setUserId(userId);
                sakaiSession.setUserEid(userEid);

                // update the user's externally provided realm definitions
                AuthzGroupService.refreshUser(userId);

                String EVENT_LOGIN = "user.login";

                // post the login event
                EventTrackingService.post(EventTrackingService.newEvent(EVENT_LOGIN, null, true));

                return true;
        }


	/* 
	 * Checks to see which form of tool or page placement we have. The normal
	 * placement is a GUID. However when the parameter sakai.site is 
	 * added to the request, the placement can be of the form 
	 * sakai.resources. This routine determines which form of the
	 * placement id, and if this is the second type, performs the lookup and
	 * returns the GUID of the placement. If we cannot resolve the 
	 * placement, we simply return the passed in placement ID. 
	 * If we cannot visit the site, we send the user to login
	 * processing and return null to the caller.
	 */

	public String getPlacement(String siteId, String placementId) 
	{
		if (siteId == null) return placementId; // Standard placement

		// find the site, for visiting
		// Sites like the !gateway site allow visits by anonymous
		Site site = null;
		try
		{
			site = SiteService.getSiteVisit(siteId);
System.out.println("SITE="+site);
			if (site == null) return placementId;
			ToolConfiguration toolConfig = site.getToolForCommonId(placementId);
System.out.println("TC="+toolConfig);
			if (toolConfig == null) return placementId;
System.out.println("TCI="+toolConfig.getId());
			return toolConfig.getId();
		}
		catch (Exception e)
		{
			return placementId;
		}
	}
}
