import java.util.Date;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.sakaiproject.tool.api.Session;
import org.sakaiproject.tool.cover.SessionManager;

import org.sakaiproject.id.cover.IdManager;

import org.sakaiproject.component.cover.ServerConfigurationService;


import org.sakaiproject.user.api.User;
import org.sakaiproject.user.cover.UserDirectoryService;
import org.sakaiproject.site.cover.SiteService;

import org.apache.axis.AxisFault;
import org.apache.axis.Constants;
import org.apache.axis.MessageContext;

import org.sakaiproject.event.cover.UsageSessionService;

/**
 * class to support Sakai Login headers sent in request as a string array
 */
public class SakaiPortalLogin {

    private static final Log LOG = LogFactory.getLog("org.sakaiproject.axis.SakaiPortalLogin");

    private User getSakaiUser(String id, String pw)
    {
        User user = null ;

	try {
        	user = UserDirectoryService.getUserByEid(id);
	} catch (Exception e) {
		user = null;
	}
	return user;
    }

    /**
	 * @deprecated see http://jira.sakaiproject.org/browse/SAK-18136
	 */
    public String loginAndCreate(String id, String pw, String firstName, String lastName, String eMail)
        throws AxisFault
    {

    	LOG.warn("SakaiPortalLogin.loginAndCreate is deprecated and will be relocated in Sakai 2.8. See SAK-18136.");
    	
	MessageContext messageContext = MessageContext.getCurrentContext(); 
	String ipAddress = messageContext.getStrProp(Constants.MC_REMOTE_ADDR);

    	String portalSecret = ServerConfigurationService.getString("webservice.portalsecret");
	String portalIPs = ServerConfigurationService.getString("webservice.portalIP");
	String ipCheck = ServerConfigurationService.getString("webservice.IPCheck");

	if (LOG.isDebugEnabled()) {
		LOG.debug("SakaiPortalLogin.loginAndCreate id="+id);
		LOG.debug("SakaiPortalLogin.loginAndCreate ip="+ipAddress+" portalIP="+portalIPs+" IPCheck="+ipCheck);
		LOG.debug("        fn="+firstName+" ln="+lastName+" em="+eMail+" ip="+ipAddress);		
	}

	if ( portalSecret == null || pw == null || 
	     portalSecret.equals("") || ! portalSecret.equals(pw) ) {
		LOG.info("SakaiPortalLogin secret mismatch ip="+ipAddress);
                throw new AxisFault("Failed login");
	}

        // Verify that this IP address matches our string
	if ( "true".equalsIgnoreCase(ipCheck) )
	{
		if (  portalIPs == null || portalIPs.equals("") ||  portalIPs.indexOf(ipAddress) == -1 ) {
		 	LOG.info("SakaiPortalLogin Trusted IP not found");
                 	throw new AxisFault("Failed login");
		}
	}

        User user = getSakaiUser(id,pw);

	if ( user == null && firstName != null && lastName != null && eMail != null ) {
		LOG.debug("Creating Sakai Account...");
		try {
			// Set password to something unguessable - they can set a new PW once they are logged in
			String hiddenPW = IdManager.createUuid();
 			UserDirectoryService.addUser(null,id,firstName,lastName,eMail,hiddenPW,"registered", null);
                        LOG.debug("User Created...");
		} catch(Exception e) {
			LOG.error("Unable to create user...");
        		throw new AxisFault("Failed login");
		}
        	user = getSakaiUser(id,pw);
	}

	if ( user != null ) {
		LOG.debug("Have User");
                Session s = SessionManager.startSession();
                SessionManager.setCurrentSession(s);
                if (s == null)
                {
                        LOG.warn("Web Services Login failed to establish session for id="+id+" ip="+ipAddress);
                        throw new AxisFault("Unable to establish session");
                }
                else
                {
			// We do not care too much on the off-chance that this fails - folks simply won't show up in presense
			// and events won't be trackable back to people / IP Addresses - but if it fails - there is nothing
			// we can do anyways.

			UsageSessionService.login(user.getId(), id, ipAddress, "SakaiPortalLogin.jws", UsageSessionService.EVENT_LOGIN_WS);

			try {
				String siteId = SiteService.getUserSiteId(s.getUserId());
				LOG.debug("Site exists..."+siteId);
			} catch(Exception e) {
				LOG.debug("Site does not exist...");
        			throw new AxisFault("Failed login");
			}
                	if ( LOG.isDebugEnabled() ) LOG.debug("Sakai Portal Login id="+id+" ip="+ipAddress+" session="+s.getId());
			return s.getId();
                }
	}
	LOG.info("SakaiPortalLogin Failed ip="+ipAddress);
        throw new AxisFault("Failed login");
    }

    /**
	 * @deprecated see http://jira.sakaiproject.org/browse/SAK-18136
	 */
    public String login(String id,String pw) 
        throws AxisFault
    {
    	LOG.warn("login is deprecated and will be relocated in Sakai 2.8. See SAK-18136.");

	LOG.debug("SakaiPortalLogin.login()");
	return loginAndCreate(id, pw, null, null, null);
    }
}
