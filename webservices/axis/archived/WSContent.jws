
import org.sakaiproject.tool.api.Session;
import org.sakaiproject.tool.cover.SessionManager;
import org.sakaiproject.authz.cover.SecurityService;

import org.sakaiproject.event.api.NotificationService;
import org.sakaiproject.content.api.ContentResource;
import org.sakaiproject.content.api.ContentResourceEdit;
import org.sakaiproject.content.api.ContentCollectionEdit;
import org.sakaiproject.content.api.ContentHostingService;
import org.sakaiproject.entity.api.ResourcePropertiesEdit;
import org.sakaiproject.component.cover.ComponentManager;
import org.sakaiproject.entity.api.ResourceProperties;
import org.sakaiproject.exception.PermissionException;
import org.sakaiproject.exception.IdUnusedException;

import org.apache.axis.AxisFault;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.List;

public class WSContent {

	private static Log log = LogFactory.getLog("org.sakaiproject.axis.WSContent");

	private ContentHostingService contentHostingService = null;

	private Session establishSession(String id) throws AxisFault {
		Session s = SessionManager.getSession(id);

		if (s == null) {
			throw new AxisFault("Session " + id + " is not active");
		}
		s.setActive();
		SessionManager.setCurrentSession(s);
		return s;
	}

	private void checkSecurity(String sessionid) throws AxisFault {
		Session session = establishSession(sessionid);
		if (!SecurityService.isSuperUser()) {
			throw new AxisFault(
					"Non-admin user trying to set resource property: "
					+ session.getUserId());
		}
	}

	private ContentHostingService getContentHostingService() {
		if (contentHostingService == null) {
			contentHostingService = (ContentHostingService) ComponentManager
			.get(ContentHostingService.class.getName());
		}
		return contentHostingService;
	}

	/**
	 * @deprecated see http://jira.sakaiproject.org/browse/SAK-18136
	 */
	public String setCustomProperty(String sessionid, String resourceId,
			String property, Boolean value, Boolean recursive) {

	   	log.warn("WSContent.setCustomProperty is deprecated and will be relocated in Sakai 2.8. See SAK-18136.");
		
		log.info("setting property for " + resourceId + ": " + property + " = " + value);

		ContentHostingService chs = getContentHostingService();

		try {
			checkSecurity(sessionid);
		} catch (AxisFault e) {
			log.warn(e);
			return "securityerror";
		}

		try {
			if (resourceId.endsWith("/")) {
				// collection
				ContentCollectionEdit col = chs.editCollection(resourceId);

				ResourcePropertiesEdit resourceProperties = col.getPropertiesEdit();
				resourceProperties.addProperty(property, Boolean.valueOf(value).toString());
				chs.commitCollection(col);
				if (recursive) {
					List<String> children = col.getMembers();
					for (int i = 0; i < children.size(); i++) {
						String resId = children.get(i);
						if (resId.endsWith("/")) {
							setCustomProperty(sessionid, resId, property, value, true);
						}
					}
				}

								
			} else {
				// resource
				ContentResourceEdit res = chs.editResource(resourceId);

				ResourcePropertiesEdit resourceProperties = res.getPropertiesEdit();
				resourceProperties.addProperty(property, Boolean.valueOf(value).toString());

				chs.commitResource(res, NotificationService.NOTI_NONE);				
			}
		} catch (PermissionException pe) {
			pe.printStackTrace();
			return "noPermission!";
		} catch (IdUnusedException iue) {
			iue.printStackTrace();
			return "noSuchId";
		} catch (Exception e) {
			return "exception";
		}
		return "success";
	}
	
	/**
	 * @deprecated see http://jira.sakaiproject.org/browse/SAK-18136
	 */
	public String setCustomProperty(String sessionid, String resourceId,
			String property, Boolean value) {
		return setCustomProperty(sessionid, resourceId, property, value, false);
	}

	

}