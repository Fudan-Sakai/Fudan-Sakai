/*
 *   ContentHosting.jws - developed against Sakai 2.4.0
 *						- redeveloped for Sakai 2.6 by Steve Swinsburg
 *
 */
 
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
import java.util.Set;
import java.util.Collection;
import java.util.Properties;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.axis.AxisFault;
import org.apache.axis.encoding.Base64;

import org.sakaiproject.authz.cover.SecurityService;
import org.sakaiproject.authz.cover.AuthzGroupService;
import org.sakaiproject.authz.api.AuthzGroup;
import org.sakaiproject.authz.api.Role;

import org.sakaiproject.user.cover.UserDirectoryService;
import org.sakaiproject.user.api.UserEdit;
import org.sakaiproject.user.api.User;

import org.sakaiproject.tool.api.Session;
import org.sakaiproject.tool.cover.SessionManager;
import org.sakaiproject.tool.cover.ToolManager;
import org.sakaiproject.tool.api.Tool;

import org.sakaiproject.site.cover.SiteService;
import org.sakaiproject.site.api.SiteService.SelectionType;
import org.sakaiproject.site.api.SiteService.SortType;
import org.sakaiproject.site.api.ToolConfiguration;
import org.sakaiproject.site.api.Site;
import org.sakaiproject.site.api.SitePage;

import org.sakaiproject.time.api.Time;

import org.sakaiproject.component.cover.ComponentManager;
import org.sakaiproject.content.api.ContentHostingService;
import org.sakaiproject.content.api.ContentCollection;
import org.sakaiproject.content.api.ContentResource;
import org.sakaiproject.content.api.ContentEntity;

import org.sakaiproject.entity.api.Entity;
import org.sakaiproject.entity.api.ResourceProperties;
import org.sakaiproject.entity.api.ResourcePropertiesEdit;

import org.sakaiproject.exception.IdInvalidException;
import org.sakaiproject.exception.IdUnusedException;
import org.sakaiproject.exception.IdUsedException;
import org.sakaiproject.exception.PermissionException;
import org.sakaiproject.exception.TypeException;

import org.sakaiproject.entity.api.ResourceProperties;

import org.sakaiproject.util.Xml;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;



/**
 *	The ContentHosting class services acts as a web service end point for methods that provide access to the
 *	Sakai Content Hosting Service.  Use SakaiLogin.jws to establish a user session.  A method is provided
 *	to get the root collection id for a given site id, from there, collections can be recursively opened
 *	and examined for resources.
 *
 *	TODO:  Add better logging entries and clean up return values so they are standardised.
 *
 *	@author Mark J. Norton <a href="mailto:markjnorton@earthlink.net">
 *	@author David Horwitz <a href="dhorwitz@ched.uct.ac.za">
  *	@author Steve Swinsburg <a href="s.swinsburg@lancaster.ac.uk">
 */
public class ContentHosting {
	
	private static final Log LOG = LogFactory.getLog(ContentHosting.class);
	public static String VIRTUAL_ROOT_ID = "Virtual-Root-Identifier";
	public static String VIRTUAL_ROOT_NAME = "Federated Collections";
	public static String RESOURCE_TYPE_COLLECTION = "collection";
	public static String RESOURCE_TYPE_RESOURCE = "resource";
	public static String RESOURCE_TYPE_ATTACHMENT = "attachment";
	
	private ContentHostingService contentHostingService;
	
	
	/**
	 *	Get ContentHostingService member variable from the ComponentManager automatically
	 *
	 *	@return ContentHosting handle
	 *
	 *	@author Steve Swinsburg
	 */
	public ContentHosting() {
		contentHostingService = (ContentHostingService) ComponentManager.get(ContentHostingService.class.getName());
	}

	
	
	
	/**
	 *	Used to establish the current user session given a session id.
	 *
	 *	@param id a sessionid
	 *	@return a Session instance
	 *
	 *	@author Mark Norton
	 */
	private Session establishSession(String id) throws AxisFault {
		Session s = SessionManager.getSession(id);

		if (s == null) {
			throw new AxisFault("Session "+id+" is not active");
		}
		s.setActive();
		SessionManager.setCurrentSession(s);
		return s;
	}

	
	
	
	/**
	 *	Get the collection id for the root collection associated with this site context.
	 *
	 *	@param context the site context
	 *	@return a root collection id string
	 *
	 *	@author Dave
	 */
	private String getCollectionId (String context) {
		
 		return	contentHostingService.getSiteCollection(context);
	}

	/**
	 *	A simple check to see if the session id passed is valid.
	 *	'null' is returned if no longer valid, otherwise the session id is returned.
	 *
	 *	@author Mark Norton
	 */
	public String checkSession (String id) {
		Session s = SessionManager.getSession(id);
		if (s == null) {
			return "null";
		}
		else {
			return id;
		}
	}

	/**
	 *	Get the virtual root id.  The virtual root serves as a container for all of the 
	 *	CHS root collections that the user currently has access to.
	 *
	 *	@param a valid session id.
	 *
	 *	@author Mark Norton
	 */
	public String getVirtualRoot (String sessionid) throws AxisFault {
		Session session = establishSession(sessionid);
		return ContentHosting.VIRTUAL_ROOT_ID;
	}
	

	/**
	 *	Get the size of the root collection (total content size on the site). 
	 *
	 *	@param sessionid a valid sessionid
	 *	@param context the site context
	 *	@return the size of the collection in thousands of bytes or -1 if failure.
	 *
	 *	@author David Horwitz
	 */
	public long getSiteCollectionSize(String sessionid, String context) {
		try {
			//establish the session
			Session s = establishSession(sessionid);
			String collectionId = getCollectionId(context);
			ContentCollection collection = contentHostingService.getCollection(collectionId);
			return collection.getBodySizeK();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return -1;
	}
	
	/**
	 *	Get content information about a site.
	 *
	 *	@param sessionid a valid sessionid
	 *	@return an XML document with site elements and attributes about each
	 *
	 *	@author David Horwitz
	 *	@author Steve Swinsburg
	 *
	 * TODO - do we want element/attributes as the XML or nodes/childnodes like the rest of the web services?
	 *
	 */
	public String getAllSitesCollectionSize(String sessionid) {
		try {
		
			Session s = establishSession(sessionid);
			List sites = SiteService.getSites(org.sakaiproject.site.api.SiteService.SelectionType.ANY, null, null, null, SortType.TITLE_ASC, null);
			
			Document dom = Xml.createDocument();
			Node list = dom.createElement("list");
			dom.appendChild(list);
			
			for (int i = 0; i <sites.size();i++){
				Site site = (Site)sites.get(i);
				Long size = getSiteCollectionSize(sessionid,site.getId());
				Element siteNode = dom.createElement("site");
				siteNode.setAttribute("id", site.getId());
				siteNode.setAttribute("title", site.getTitle());
				siteNode.setAttribute("size", size.toString());
				siteNode.setAttribute("type", site.getType());
				siteNode.setAttribute("createdBy", site.getCreatedBy().getEid());
				Time time = site.getCreatedTime();
				siteNode.setAttribute("createdTime", time.getDisplay() );
	        		
				list.appendChild(siteNode);
			}
			
			return Xml.writeDocumentToString(dom);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return "<exception/>";
	}


	/**
	 *	Create a root collection for a site given it's context.
	 *
	 *	TODO:  Add a message notifying the Resource tool that a root.has been added to a site.
	 *
	 *	@param sessionid a valid sessionid
	 *	@return the id of the new collection.
	 *
	 *	@author David Horwitz
	 */
	public String createTopFolder(String sessionId, String context, String name) {			
		String collectionId = getCollectionId(context);
		return createFolder(sessionId, collectionId, name);
	}

	/**
	 *	Create a collection for a site given it's id (with path).
	 *
	 *	TODO:  Add a message notifying the Resource tool that a collection.has been created.
	 *
	 *	@param sessionid a valid sessionid
	 *	@return the id of the new collection.
	 *
	 *	@author David Horwitz
	 */
	public String createFolder(String sessionid, String collectionId, String name) {
	
		try {
			//establish the session
			Session s = establishSession(sessionid);

			String newCollectionId = collectionId + name + Entity.SEPARATOR;
			
			ResourcePropertiesEdit resourceProperties = contentHostingService.newResourceProperties();
			
			resourceProperties.addProperty (ResourceProperties.PROP_DISPLAY_NAME, name);
			//resourceProperties.addProperty (ResourceProperties.PROP_DESCRIPTION, description);
			
			ContentCollection collection = contentHostingService.addCollection(newCollectionId, resourceProperties);
			
			return newCollectionId;
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return "Failure";
	}

	/**
	 *	Add a resource to a given collection.  The resource is passed either as text or encoded using Base64 flagged
	 *	using the binary parameter.
	 *
	 *	TODO:  Add a message notifying the Resource tool that a resource has been added to a collection.
	 *
	 *	@param sessionid a valid sessionid
	 *	@param name of the resource to be added
	 *	@param collectionId of the collection it is to be added to
	 *	@param contentMime content string
	 *	@param description of the resource to be added
	 *	@param binary if true, content is encoded using Base64, if false content is assumed to be text.
	 *	@return 'Success' or 'Failure'
	 *
	 *	@author David Horwitz
	 */
	public String createContentItem(String sessionid, String name, String collectionId, String contentMime, 
		String description, String type, boolean binary) {
	
		try {
			//establish the session
			Session s = establishSession(sessionid);

			ResourcePropertiesEdit props = contentHostingService.newResourceProperties();
			props.addProperty (ResourceProperties.PROP_DISPLAY_NAME, name);
			props.addProperty (ResourceProperties.PROP_DESCRIPTION, description);

			byte[] content = null;
			if (binary) {
				content = Base64.decode(contentMime);
				System.out.println("File of size: " + content + " found");	
			}
			else {
				content = contentMime.getBytes();
			}
			
			//System.out.println("name is: " + name +" , collection: " + collectionId + " resp: " + props);
			ContentResource cont = contentHostingService.addResource(name, collectionId, 10, type, content, props ,0);

			//ContentResource cont = ContentHostingService.addResource(name, collectionId, 10,"content", 
			//	contentMime, props, new ArrayList(), 1); 
			return "Success";
		}
	
		catch (Exception e) {
			e.printStackTrace();
		}
		return "Failure";
	}


	/**
	 *	Get the data associated with a resource id.  This is actually an alternative way to get a resource, since
	 *	most browsers will download a file by clicking on a link.  URLs are given by getResources() and getItem()
	 *	using the binary parameter.  It is provided for appications other than browsers that may wish to access
	 *	content hosted by a Sakai instance.
	 *
	 *	An Axis fault is thrown if the id is a collection or some other exception is thrown from the Content
	 *	Hosting Service.
	 *
	 *	@param sessionid a valid sessionid
	 *	@param collectionId of the collection it is to be added to
	 *
	 *	@return Binary data encoded as Base64.
	 *
	 *	@author Mark Norton
	 */
	public String getContentData(String sessionid, String resourceId) throws AxisFault {
		String encodedData = null;
	
		try {
			//establish the session
			Session s = establishSession(sessionid);
			
			ContentResource res = contentHostingService.getResource (resourceId);
			
			byte[] data = res.getContent();
			encodedData = Base64.encode (data);
		}
	
		catch (Exception e) {
			throw new AxisFault (e.getMessage());
		}
		return encodedData;
	}

	/**
	 *	Get a resource list for the id provided.
	 *	This is returned as an XML string where each resource element has an id, name,and type child elements.
	 *	Three cases are supported at this time:
	 *	<ul>
	 *	<li>Virtual root id:  returns the list of site roots.</li>
	 *	<li>Collection id:  returns the resources in the collection.</li>
	 *	<li>Resource id:  returns a list with a single resource.</li>
	 *	</ul>
	 *
	 *	@param a valid session id.
	 *	@param id of virtual root, collection, or resource.
	 *	@return an empty string if no resources in this collection or an XML list of resource ids, names, and types.
	 *
	 *	@author Mark Norton
	 */
	public String getResources (String sessionid, String id) throws AxisFault {
		Session session = establishSession(sessionid);
		String ret = "";

		Document dom = Xml.createDocument();
		Node list = dom.createElement("list");
		dom.appendChild(list);

		if (id.compareTo (ContentHosting.VIRTUAL_ROOT_ID) == 0) {
			try {
				List sites = SiteService.getSites(SelectionType.UPDATE, null, null, null, SortType.TITLE_ASC, null);

				for (Iterator i = sites.iterator(); i.hasNext();) {
					Site site = (Site)i.next();
					String rootId = contentHostingService.getSiteCollection(site.getId());

					try {
						// If site has no CHS root, it will throw unused id exception.
						ContentCollection coll = contentHostingService.getCollection (rootId);

						Node item = getResourceBlock (coll, dom);

						list.appendChild(item);
					}
					catch (IdUnusedException ex) {
						continue;
					}
				}

			}
			catch (Exception e) {
				return e.getClass().getName() + " : " + e.getMessage();
			}
		}
		else {
			try {
				ContentCollection coll = contentHostingService.getCollection (id);
				List entities = coll.getMemberResources();
				
				for (Iterator i = entities.iterator(); i.hasNext();) {
					ContentEntity ent = (ContentEntity)i.next();
					
					Node item = getResourceBlock (ent, dom);
					list.appendChild(item);
				}
			}
			catch (TypeException ex1) {
				try {
					ContentResource res = contentHostingService.getResource (id);
					Node item = getResourceBlock (res, dom);
					list.appendChild(item);
				}
				catch (Exception ex2) {
					return ex2.getClass().getName() + " : " + ex2.getMessage();
				}
			}
			catch (IdUnusedException ex3) {
				try {
					ContentResource res = contentHostingService.getResource (id);
					Node item = getResourceBlock (res, dom);
					list.appendChild(item);
				}
				catch (Exception ex4) {
					return ex4.getClass().getName() + " : " + ex4.getMessage();
				}
			}
			catch (Exception ex5) {
				return ex5.getClass().getName() + " : " + ex5.getMessage();
			}
		}
		
		ret = Xml.writeDocumentToString(dom);
		return ret;
	}


	/**
	 *	Get information for a resource or collection..
	 *	This is returned as an XML string in a resource element that has an id, name,and type child elements.
	 *	Three cases are supported at this time:
	 *	<ul>
	 *	<li>Virtual root id:  returns hard coded information.</li>
	 *	<li>Collection id:  returns the collection information.</li>
	 *	<li>Resource id:  returns the resource information.</li>
	 *	</ul>
	 *
	 *	@param a valid session id.
	 *	@param id of the virtual root, a collection, or a resource.
	 *	@return an empty string if no resources in this collection or an XML list of resource ids, names, and types.
	 *
	 *	@author Mark Norton
	 */
	public String getInfo (String sessionid, String id) throws AxisFault {
		Session session = establishSession(sessionid);
		String ret = "";

		Document dom = Xml.createDocument();

		if (id.compareTo (ContentHosting.VIRTUAL_ROOT_ID) == 0) {
			Node item = getVirtualBlock (dom);
			dom.appendChild(item);
		}
		else {
			try {
				ContentCollection coll = contentHostingService.getCollection (id);
				Node item = getResourceBlock (coll, dom);
				dom.appendChild(item);
			}
			catch (TypeException ex1) {
				try {
					ContentResource res = contentHostingService.getResource (id);
					Node item = getResourceBlock (res, dom);
					dom.appendChild(item);
				}
				catch (Exception ex2) {
					return ex2.getClass().getName() + " : " + ex2.getMessage();
				}
			}
			catch (IdUnusedException ex3) {
				try {
					ContentResource res = contentHostingService.getResource (id);
					Node item = getResourceBlock (res, dom);
					dom.appendChild(item);
				}
				catch (Exception ex4) {
					return ex4.getClass().getName() + " : " + ex4.getMessage();
				}
			}
			catch (Exception ex5) {
				return ex5.getClass().getName() + " : " + ex5.getMessage();
			}
		}
		
		ret = Xml.writeDocumentToString(dom);
		return ret;
	}


	/*
	 *  Given a content entity, returns the following information as an XML node:
	 *  <ul>
	 *  <li>id - resource identifier</li>
	 *  <li>name - display name</li>
	 *  <li>type - resource type</li>
	 *
	 *  @author Mark Norton
	 */
	private Node getResourceBlock (ContentEntity entity, Document dom) {
		String id = null;	//  The resource or collection id.
		String name = null;	//  The display name.
		String type = null;	//  The resource type.
		String url = null;	//  The URL.
		
		// Get the content entity id.
		id = entity.getId();
	
		// Get the display name.
		ResourceProperties props = entity.getProperties();
		name = props.getProperty(ResourceProperties.PROP_DISPLAY_NAME);

		// Get the resource type.
		if (entity.isCollection())
			type = ContentHosting.RESOURCE_TYPE_COLLECTION;
		else
			type = ContentHosting.RESOURCE_TYPE_RESOURCE;

		// Get the URL for the ContentEntity.
		url = entity.getUrl();
		
	
		//  Create the resource element.
		Node item = dom.createElement("resource");

		//  Create and append the id child element.
		Node resId = dom.createElement("id");
		resId.appendChild (dom.createTextNode(id));
		item.appendChild(resId);

		//  Create and append the name child element.
		Node resName = dom.createElement("name");
		resName.appendChild( dom.createTextNode(name) );
		item.appendChild(resName);

		//  Create and append the type child element.
		Node resType = dom.createElement("type");
		resType.appendChild(dom.createTextNode(type));
		item.appendChild(resType);
		
		//  Create and append the URL child element.
		Node resUrl = dom.createElement("url");
		resUrl.appendChild(dom.createTextNode(url));
		item.appendChild(resUrl);

		return item;
	}


	/*
	 *  Create a resouce XML node for the virtual root containing:
	 *  <ul>
	 *  <li>id - resource identifier</li>
	 *  <li>name - display name</li>
	 *  <li>type - resource type</li>
	 *
	 *  @author Mark Norton
	 */
	private Node getVirtualBlock (Document dom) {
		String id = ContentHosting.VIRTUAL_ROOT_ID;
		String name = ContentHosting.VIRTUAL_ROOT_NAME;
		String type = ContentHosting.RESOURCE_TYPE_COLLECTION;
	
		//  Create the resource element.
		Node item = dom.createElement("resource");

		//  Create and append the id child element.
		Node resId = dom.createElement("id");
		resId.appendChild (dom.createTextNode(id));
		item.appendChild(resId);

		//  Create and append the name child element.
		Node resName = dom.createElement("name");
		resName.appendChild( dom.createTextNode(name) );
		item.appendChild(resName);

		//  Create and append the type child element.
		Node resType = dom.createElement("type");
		resType.appendChild(dom.createTextNode(type));
		item.appendChild(resType);
		
		return item;
	}
	
	
}
