/**
 ** Query and return list of public portfolio as a formatted xml document
 **/
        
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Date;
import java.text.DateFormat;

import org.theospi.portfolio.presentation.model.Presentation;
import org.theospi.portfolio.presentation.PresentationManager;
import org.sakaiproject.component.cover.ComponentManager;
import org.sakaiproject.component.api.ServerConfigurationService;
import org.sakaiproject.metaobj.shared.mgt.IdManager;

import org.apache.axis.AxisFault;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.sakaiproject.util.Xml;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

public class Portfolio
{
   private static final Log logger = LogFactory.getLog(Portfolio.class);
   
   private PresentationManager presentationManager;
   private IdManager idManager;
   private ServerConfigurationService serverConfigurationService;
   
   public Portfolio() {
	   presentationManager = (PresentationManager)ComponentManager.get("presentationManager");
	   idManager = (IdManager)ComponentManager.get("idManager");
	   serverConfigurationService = (ServerConfigurationService) ComponentManager.get(ServerConfigurationService.class.getName());
   }
   
   
   /** Return XML document string listing all public portfolios in all worksites
    **
    ** @return XML document string
    **/
   public String getAllPublicPortfolios()
		throws AxisFault
   {
      Collection presResults = presentationManager.findPublicPresentations(null);
      return formatResults( presResults );
   }
   
   /** Return XML document string listing public portfolios in specified worksite
    **
    ** @param siteId specified worksite id
    ** @return XML document string
    **/
   public String getSitePublicPortfolios( String siteId )
		throws AxisFault
   {
      Collection presResults = presentationManager.findPublicPresentations(siteId);
      return formatResults( presResults );
   }
   
   /** Return the XML form document string corresponding to the specified public portfolio
    **
    ** @param portfolioId public portfolio id
    ** @return XML document string
    **/
   public String getPortfolioOptions( String portfolioId )
		throws AxisFault
   {
      StringBuilder options = new StringBuilder();
      
      if ( portfolioId == null )
         throw new AxisFault("No portfolioId specified");
		Presentation presentation = presentationManager.getPresentation(idManager.getId(portfolioId));
      if ( presentation == null || !presentation.getIsPublic() )
         throw new AxisFault("Attempt to view non-existent or non-public portfolio "+portfolioId );
         
		if (presentation.getPropertyForm() == null)
         throw new AxisFault("No portfolio option form available "+portfolioId );
         
      return presentationManager.getPublicPropertyForm( presentation );
   }

   /** Format a colleciton of Presentations into an XML document string
    **
    ** @param presResults collection of presentations
    ** @return XML document string
    **/   
   private String formatResults( Collection presResults )
   {
	   String serverUrl = serverConfigurationService.getServerUrl();
	   DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);
	   
	  Document doc = Xml.createDocument();
      Node results = doc.createElement("results");
      doc.appendChild(results);

      if ( presResults == null )
         return Xml.writeDocumentToString(doc);
      
      for ( Iterator it=presResults.iterator(); it.hasNext(); )
      {
         Presentation pres = (Presentation)it.next();
         
         // make sure portfolio hasn't expired
         if ( pres.isExpired() )
            continue;
         
         Node item = doc.createElement("presentation");
         results.appendChild(item);
      
         Node itemChild = doc.createElement("id");
         itemChild.appendChild (doc.createTextNode(pres.getId().getValue()));
         item.appendChild(itemChild);
      
         itemChild = doc.createElement("name");
         itemChild.appendChild (doc.createTextNode(pres.getName()));
         item.appendChild(itemChild);
      
         itemChild = doc.createElement("description");
         itemChild.appendChild (doc.createTextNode(pres.getDescription()));
         item.appendChild(itemChild);
      
         String url =  serverUrl + "/osp-presentation-tool/viewPresentation.osp?id=" + pres.getId().getValue();
         itemChild = doc.createElement("url");
         itemChild.appendChild (doc.createTextNode(url));
         item.appendChild(itemChild);
      
         itemChild = doc.createElement("owner");
         itemChild.appendChild (doc.createTextNode(pres.getOwner().getDisplayName()));
         item.appendChild(itemChild);
      
         Date dateCreated = pres.getCreated();
         itemChild = doc.createElement("dateCreated");
         itemChild.appendChild (doc.createTextNode(dateFormat.format(dateCreated)));
         item.appendChild(itemChild);
      
         Date dateModified = pres.getModified();
         itemChild = doc.createElement("dateModified");
         itemChild.appendChild (doc.createTextNode(dateFormat.format(dateModified)));
         item.appendChild(itemChild);
      
         itemChild = doc.createElement("siteId");
         itemChild.appendChild (doc.createTextNode(pres.getSiteId()));
         item.appendChild(itemChild);
      
         itemChild = doc.createElement("siteName");
         itemChild.appendChild (doc.createTextNode(pres.getWorksiteName()));
         item.appendChild(itemChild);
      
         itemChild = doc.createElement("isDefault");
         itemChild.appendChild (doc.createTextNode(String.valueOf(pres.getIsDefault())));
         item.appendChild(itemChild);
      }
      
      return Xml.writeDocumentToString(doc);
   }
} 
